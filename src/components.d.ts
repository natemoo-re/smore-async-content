/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface AsyncContent {
      'src': string;
    }
  }

  interface HTMLAsyncContentElement extends StencilComponents.AsyncContent, HTMLStencilElement {}

  var HTMLAsyncContentElement: {
    prototype: HTMLAsyncContentElement;
    new (): HTMLAsyncContentElement;
  };
  interface HTMLElementTagNameMap {
    'async-content': HTMLAsyncContentElement;
  }
  interface ElementTagNameMap {
    'async-content': HTMLAsyncContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'async-content': JSXElements.AsyncContentAttributes;
    }
  }
  namespace JSXElements {
    export interface AsyncContentAttributes extends HTMLAttributes {
      'src'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AsyncError {
      'cancel': () => void;
      'errorRender': (args: {status?: number, message?: string}) => JSX.Element;
      'ms': number;
      'setStatus': (status: number, message?: string) => void;
    }
  }

  interface HTMLAsyncErrorElement extends StencilComponents.AsyncError, HTMLStencilElement {}

  var HTMLAsyncErrorElement: {
    prototype: HTMLAsyncErrorElement;
    new (): HTMLAsyncErrorElement;
  };
  interface HTMLElementTagNameMap {
    'async-error': HTMLAsyncErrorElement;
  }
  interface ElementTagNameMap {
    'async-error': HTMLAsyncErrorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'async-error': JSXElements.AsyncErrorAttributes;
    }
  }
  namespace JSXElements {
    export interface AsyncErrorAttributes extends HTMLAttributes {
      'errorRender'?: (args: {status?: number, message?: string}) => JSX.Element;
      'ms'?: number;
      'onHasError'?: (event: CustomEvent<void>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AsyncPlaceholder {
      'cancel': () => void;
      'component': string;
      'componentProps': { [key: string]: any };
      'ms': number;
    }
  }

  interface HTMLAsyncPlaceholderElement extends StencilComponents.AsyncPlaceholder, HTMLStencilElement {}

  var HTMLAsyncPlaceholderElement: {
    prototype: HTMLAsyncPlaceholderElement;
    new (): HTMLAsyncPlaceholderElement;
  };
  interface HTMLElementTagNameMap {
    'async-placeholder': HTMLAsyncPlaceholderElement;
  }
  interface ElementTagNameMap {
    'async-placeholder': HTMLAsyncPlaceholderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'async-placeholder': JSXElements.AsyncPlaceholderAttributes;
    }
  }
  namespace JSXElements {
    export interface AsyncPlaceholderAttributes extends HTMLAttributes {
      'component'?: string;
      'componentProps'?: { [key: string]: any };
      'ms'?: number;
      'onHasPlaceholder'?: (event: CustomEvent<void>) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;